import pandas as pd
import pandahouse
import matplotlib.pyplot as plt
import seaborn as sns
import io
import telegram

from airflow.decorators import dag, task
from datetime import datetime, timedelta

sns.set()

#–î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–∫–∏–¥—ã–≤–∞—é—Ç—Å—è –≤ —Ç–∞—Å–∫–∏
default_args = {
    'owner':'k_maltseva_13',
    'depends_on_past': False,
    'retries': 2,
    'retry_delay': timedelta(minutes=5),
    'start_date': datetime(2023, 8, 12)
    }

#–ò–Ω—Ç–µ—Ä–≤–∞–ª –∑–∞–ø—É—Å–∫–∞ DAG (–ú–°–ö)
schedule_interval = '0 11 * * *'

@dag(default_args=default_args, schedule_interval=schedule_interval, catchup=False)
def report_lenta_mku():

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã feed_actions
    @task()
    def extract_df():
        connection = {'host': 'https://clickhouse.lab.karpov.courses',
            'database':'simulator_20230720',
            'user':'student', 
            'password':'dpo_python_2020'
            }

        # –∑–∞–ø—Ä–æ—Å        
        query = '''SELECT 
                    toDate(time) as date,
                    uniqExact(user_id) as DAU,
                    countIf(time, action = 'view') as views,
                    countIf(time, action = 'like') as likes,
                    ROUND(likes / views * 100, 3) as ctr
                FROM simulator_20230720.feed_actions
                WHERE toDate(time) between yesterday() - 7 AND yesterday()
                GROUP BY date
                ORDER BY date
                '''
                
        data = pandahouse.read_clickhouse(query, connection=connection)
        return data

    @task()
    def feed_report(data):
        msg = '''
        üìë –û—Ç—á–µ—Ç –ø–æ –ª–µ–Ω—Ç–µ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ {date} üìë
    (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–π –º–µ—Ç—Ä–∏–∫–∏ 1 –¥–µ–Ω—å –Ω–∞–∑–∞–¥ –∏ 7 –¥–Ω–µ–π –Ω–∞–∑–∞–¥)
    DAU: {users} ({to_users_day_ago:+.2%}, {to_users_week_ago:+.2%})
    Views: {views} ({to_views_day_ago:+.2%}, {to_views_week_ago:+.2%})
    Likes: {likes} ({to_likes_day_ago:+.2%}, {to_likes_week_ago:+.2%})
    CTR: {ctr} ({to_ctr_day_ago:+.2%}, {to_ctr_week_ago:+.2%})
    '''

        yesterday = pd.Timestamp('now') - pd.DateOffset(days=1)
        day_ago = yesterday - pd.DateOffset(days=1)
        week_ago = yesterday - pd.DateOffset(days=7)
        
        data['date'] = pd.to_datetime(data['date']).dt.date
        data = data.astype({'DAU': int, 'views': int, 'likes': int})

        report = msg.format(date=yesterday.date(),
        
                            users=data[data['date'] == yesterday.date()]['DAU'].iloc[0],
                            to_users_day_ago=(data[data['date'] == yesterday.date()]['DAU'].iloc[0] -
                                            data[data['date'] == day_ago.date()]['DAU'].iloc[0])/
                                            data[data['date'] == day_ago.date()]['DAU'].iloc[0],
                            to_users_week_ago=(data[data['date'] == yesterday.date()]['DAU'].iloc[0] -
                                            data[data['date'] == week_ago.date()]['DAU'].iloc[0])/
                                            data[data['date'] == week_ago.date()]['DAU'].iloc[0],
                            
                            views=data[data['date'] == yesterday.date()]['views'].iloc[0],
                            to_views_day_ago=(data[data['date'] == yesterday.date()]['views'].iloc[0] -
                                            data[data['date'] == day_ago.date()]['views'].iloc[0])/
                                            data[data['date'] == day_ago.date()]['views'].iloc[0],
                            to_views_week_ago=(data[data['date'] == yesterday.date()]['views'].iloc[0] -
                                            data[data['date'] == week_ago.date()]['views'].iloc[0])/
                                            data[data['date'] == week_ago.date()]['views'].iloc[0],
                            
                            likes=data[data['date'] == yesterday.date()]['likes'].iloc[0],
                            to_likes_day_ago=(data[data['date'] == yesterday.date()]['likes'].iloc[0] -
                                            data[data['date'] == day_ago.date()]['likes'].iloc[0])/
                                            data[data['date'] == day_ago.date()]['likes'].iloc[0],
                            to_likes_week_ago=(data[data['date'] == yesterday.date()]['likes'].iloc[0] -
                                            data[data['date'] == week_ago.date()]['likes'].iloc[0])/
                                            data[data['date'] == week_ago.date()]['likes'].iloc[0],
                            
                            ctr=data[data['date'] == yesterday.date()]['ctr'].iloc[0],
                            to_ctr_day_ago=(data[data['date'] == yesterday.date()]['ctr'].iloc[0] -
                                            data[data['date'] == day_ago.date()]['ctr'].iloc[0])/
                                            data[data['date'] == day_ago.date()]['ctr'].iloc[0],
                            to_ctr_week_ago=(data[data['date'] == yesterday.date()]['ctr'].iloc[0] -
                                            data[data['date'] == week_ago.date()]['ctr'].iloc[0])/
                                            data[data['date'] == week_ago.date()]['ctr'].iloc[0])
    
        return report

    @task()
    def make_plot(data):
        fig, axes = plt.subplots(2, 2, figsize=(16, 10))        
        fig.suptitle('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ª–µ–Ω—Ç–µ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ 7 –¥–Ω–µ–π')

        plot_dict = {(0, 0): {'y': 'DAU', 'title': '–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏'},
             (0, 1): {'y': 'views', 'title': 'Views'},
             (1, 0): {'y': 'likes', 'title': 'Likes'},
             (1, 1): {'y': 'ctr', 'title': 'CTR'}
            }

        for i in range(2):
            for j in range(2):
                sns.lineplot(ax=axes[i, j], data=data, x='date', y=plot_dict[(i, j)]['y'])
                axes[i, j].set_title(plot_dict[(i, j)]['title'])
                axes[i, j].set(xlabel=None)
                axes[i, j].set(ylabel=None)
                for ind, label in enumerate(axes[i, j].get_xticklabels()):
                    if ind % 2 == 0:
                        label.set_visible(True)
                    else:
                        label.set_visible(False)
                        
        plot_object = io.BytesIO()   # —Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç
        plt.savefig(plot_object)   # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ –æ–±—ä–µ–∫—Ç
        plot_object.seek(0)   # –ø–µ—Ä–µ–¥–≤–∏–≥–∞–µ–º –∫—É—Ä—Å–æ—Ä –≤ –Ω–∞—á–∞–ª–æ
        plot_object.name = 'Feed_status.png'   # –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç—É
        plt.close()   # –∑–∞–∫—Ä—ã–≤–∞–µ–º –æ–±—ä–µ–∫—Ç

        return plot_object

    @task()
    def send(report, plot_object, chat_id):
        # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
        my_token='—Ç–æ–∫–µ–Ω —É–¥–∞–ª–µ–Ω'
        bot = telegram.Bot(token=my_token)
        #chat_id = chat or -927780322   # my_chat=1079188742

        bot.sendMessage(chat_id=chat_id, text=report)    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.sendPhoto(chat_id=chat_id, photo=plot_object)    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫


    data = extract_df()
    report = feed_report(data)
    plot_object = make_plot(data)
    send(report, plot_object, chat_id=-927780322)

report_lenta_mku = report_lenta_mku()
